{"majorversion": 2, "filemap": {"domlib.js": {"classlist": ["dom", "dom.classList", "dom.event", "dom.helper", "dom.xhr", "dom.FormData"], "name": "domlib.js", "module": "dom"}}, "modules": {"dom": {"description": "Module for Dom Manipulations, Traversing and some small helpers", "submodules": ["classList", "event", "helper", "xhr", "FormData"], "classlist": ["dom", "dom.classList", "dom.event", "dom.helper", "dom.xhr", "dom.FormData"], "filelist": ["domlib.js"], "subdata": {"classList": {"name": "dom.classList", "description": "Element.classList Polyfill / Submodule"}, "FormData": {"name": "dom.FormData", "description": "Small FormData polyfill (doesn't work with input type=\"file\" / binary data)"}, "event": {"name": "dom.event", "description": "Submodule for Dom Event handling"}, "helper": {"name": "dom.helper", "description": "Submodule for some helper functions"}, "xhr": {"name": "dom.xhr", "description": "Submodule for making Ajax-Calls"}}, "name": "dom"}}, "classmap": {"dom.xhr": {"name": "dom.xhr", "namespace": "dom", "module": "dom", "guessedname": "xhr", "methods": {"post": {"return": {"type": "Object", "description": "Returns the XMLHttpRequest Object for that Request."}, "params": [{"type": "String", "name": "url", "description": " The Url to which the Ajax call should be made"}, {"type": "Mixed", "name": "data", "description": " Optional: The data you want to send"}, {"type": "Function", "name": "success", "description": " The Success Callback will be called if the Request was made Successful (readyState === 4, httpStatus === 200)."}, {"type": "Function", "name": "error", "description": " The Error Callback will be called if the Server responded with a different StatusCode than 200"}], "description": "Method / Shortcut for making Ajax Post Requestes", "guessedname": "post", "guessedtype": "function"}, "request": {"return": {"type": "Object", "description": "Returns the XMLHttpRequest Object for that Request."}, "params": [{"type": "String", "name": "method", "description": " The Method that should be used for the request ('get' or 'post', will be automatically transformed to uppercase)."}, {"type": "String", "name": "url", "description": " The Url to which the Ajax call should be made"}, {"type": "Mixed", "name": "data", "description": " Optional: The data you want to send"}, {"type": "Function", "name": "success", "description": " The Success Callback will be called if the Request was made Successful (readyState === 4, httpStatus === 200)."}, {"type": "Function", "name": "error", "description": " The Error Callback will be called if the Server responded with a different StatusCode than 200"}], "description": "Method for making Ajax Requests", "guessedname": "request", "guessedtype": "function"}, "get": {"return": {"type": "Object", "description": "Returns the XMLHttpRequest Object for that Request."}, "params": [{"type": "String", "name": "url", "description": " The Url to which the Ajax call should be made"}, {"type": "Function", "name": "success", "description": " The Success Callback will be called if the Request was made Successful (readyState === 4, httpStatus === 200)."}, {"type": "Function", "name": "error", "description": " The Error Callback will be called if the Server responded with a different StatusCode than 200"}], "description": "Method / Shortcut for making Ajax Get Requestes", "guessedname": "get", "guessedtype": "function"}}, "file": "domlib.js", "guessedtype": "property", "shortname": "xhr", "description": "Submodule for making Ajax-Calls"}, "dom.FormData": {"name": "dom.FormData", "constructors": [{"params": [{"type": "Element", "name": "form", "description": " Optional: You could pass a Form-Element to the Constructor to create an FormData Object from it"}], "description": "Small FormData polyfill (doesn't work with input type=\"file\" / binary data)"}], "namespace": "dom", "module": "dom", "guessedname": "FormData", "methods": {"toString": {"return": {"type": "String", "description": "All Fields concatenated"}, "description": "Creating the multipart/form-data String", "guessedname": "toString", "guessedtype": "function"}, "append": {"params": [{"type": "String", "name": "key", "description": " The Key that should be used"}, {"type": "Mixed", "name": "val", "description": " The Value"}], "description": "Method for adding data to the FormData Element", "guessedname": "append", "guessedtype": "function"}}, "file": "domlib.js", "guessedtype": "function", "shortname": "FormData", "description": "Small FormData polyfill (doesn't work with input type=\"file\" / binary data)"}, "dom": {"name": "dom", "namespace": "", "module": "dom", "methods": {"camelCase": {"return": {"type": "String", "description": "A String without hypens where every Character directly after a hyphen is camelcased."}, "params": [{"type": "String", "name": "string", "description": " The String you want to camelcase"}], "description": "A Helper Function for camelCasing Strings which have hyphens in it (for example: 'foo-bar-baz' would become 'fooBarBaz').", "private": ""}, "setSelectorEngine": {"params": [{"type": "Function", "name": "engine", "description": " The Selector Engine you want to use"}], "description": "If the Browser doesn't support querySelectorAll add the Method setSelectorEngine to domtools which replaces the noop function selectorEngine with i.e. Sizzle or something else.\nThis Method will only be avaialable if the Browser doesn't support querySelectorAll, so you have to test if this method exists and if it's true you must call it and pass a CSS Selector Engine.\nOtherwise domtools.query and domtools.byClass will throw an Error everytime you call them.\nThe easiest way: Create an init function for your application and check if domtools.setSelectorEngine exists, if not you could call your init function, otherwise load Sizzle and call then your init function.", "guessedname": "querySelectorAll", "guessedtype": "property"}, "byTagName": {"return": {"type": "[NodeList]", "description": "Returns a NodeList of Elements which match the given Tagname"}, "params": [{"type": "String", "name": "tag", "description": " The Tagname of the Element you want to reference"}, {"type": "Element", "name": "scope", "description": " Optional: You could provide a Scope of an Element to search only inside that Scope for Elements"}], "description": "Returns Elements by their Tagname", "guessedname": "byTagName", "guessedtype": "function"}, "byName": {"return": {"type": "[NodeList]", "description": "Returns a NodeList of Elements which match the given Name"}, "params": [{"type": "String", "name": "name", "description": " The Name of the Element you want to reference"}], "description": "Returns Elements by their Name", "guessedname": "byName", "guessedtype": "function"}, "data": {"return": {"type": "Mixed", "description": "Depends on how many Parameters you specify you get either an Object containing all data-* Values or the specific Value you've get/set."}, "params": [{"type": "Element", "name": "el", "description": " The Element on which you want operate"}, {"type": "String", "name": "key", "description": " Optional: If you don't provide a Key and optVal you will return an Object containing all data-* Properties (camelCased). Otherwise you could provide a Key to get or set a specific Attribute."}, {"type": "String", "name": "optVal", "description": " Optional: If you don't specify a value, the current data-* Value for the given Key is returned. Otherwise you can set the Value"}], "description": "A Wrapper Function for getting and setting custom data-* Attributes on Dom Elements", "guessedname": "data", "guessedtype": "function"}, "query": {"return": {"type": "[NodeList]", "description": "Returns a NodeList of Elements which match the given Selector"}, "params": [{"type": "String", "name": "selector", "description": " Any CSS Selector. For Example: a[href=\"#\"] or p > div > .foo.bar ~ span"}, {"type": "Element", "name": "scope", "description": " Optional: You could provide a Scope of an Element to search only inside that Scope for Elements"}], "description": "Returns Elements using a CSS Selector Query", "guessedname": "query", "guessedtype": "property"}, "byClass": {"return": {"type": "[NodeList]", "description": "Returns a NodeList of Elements which have the given className"}, "params": [{"type": "String", "name": "classname", "description": " The className you want to search for"}, {"type": "Element", "name": "scope", "description": " Optional: You could provide a Scope of an Element to search only inside that Scope for Elements"}], "description": "Returns Elements by their className", "guessedname": "byClass", "guessedtype": "property"}, "getData": {"return": {"type": "String", "description": "The Value from the custom data-* Attribute"}, "params": [{"type": "Element", "name": "el", "description": " The Dom Element on which you operate"}, {"type": "String", "name": "string", "description": " The Key of the data-* Attribute you want to read"}], "description": "A Helper Function for getting the Value of an data-* Attribute", "private": ""}, "byId": {"return": {"type": "Element", "description": "If there is an Element with the given ID it will be returned - otherwise the returnvalue is undefined"}, "params": [{"type": "String", "name": "id", "description": " The ID of the Element you want to reference"}], "description": "Returns an Element by its ID", "guessedname": "byId", "guessedtype": "function"}, "hyphenate": {"return": {"type": "String", "description": "A lowercased String with hyphens before every Character which was before uppercased."}, "params": [{"type": "String", "name": "string", "description": " The String you want to hyphenate"}], "description": "A Helper Function for hyphenating Strings which are camelCased (for example: 'fooBarBaz' would become 'foo-bar-baz').", "private": ""}, "getSetData": {"return": {"type": "Mixed", "description": "Depends on how many Parameters you specify you get either an Object containing all data-* Values or the specific Value you've get/set."}, "params": [{"type": "Element", "name": "el", "description": " The Element on which you want operate"}, {"type": "String", "name": "key", "description": " Optional: If you don't provide a Key and optVal you will return an Object containing all data-* Properties (camelCased). Otherwise you could provide a Key to get or set a specific Attribute."}, {"type": "String", "name": "optVal", "description": " Optional: If you don't specify a value, the current data-* Value for the given Key is returned. Otherwise you can set the Value"}], "description": "A Helper Function for setting the Value of an data-* Attribute", "private": ""}, "setData": {"return": {"type": "String", "description": "The Value from the custom data-* Attribute"}, "params": [{"type": "Element", "name": "el", "description": " The Dom Element on which you operate"}, {"type": "String", "name": "string", "description": " The Key of the data-* Attribute you want to set"}, {"type": "String", "name": "val", "description": " The Value you want to write in the data-* Attribute"}], "description": "A Helper Function for setting the Value of an data-* Attribute", "private": ""}}, "static": "", "file": "domlib.js", "shortname": "dom", "description": "Module for Dom Manipulations, Traversing and some small helpers"}, "dom.classList": {"name": "dom.classList", "constructors": [{"params": [{"type": "Element", "name": "el", "description": ""}], "description": "Element.classList Polyfill / Submodule"}], "namespace": "dom", "module": "dom", "properties": {"classes": {"guessedname": "classes", "type": "property", "description": "Internal Array of Classes from the className property of the Element", "private": "", "guessedtype": "property"}}, "guessedname": "classList", "methods": {"getIE7Constructor": {"guessedname": "getIE7Constructor", "return": {"type": "Function", "description": "Returns a Constructor Function which can then extended by adding Methods to its Prototype"}, "description": "Returns a Constructor Function which basically is an Array Object borrowed from an iframe. IE 7 and below can't handle a Constructor Function whichs prototype is set to Array.prototype,\nso we create an iframe and pass the Array Object from the iframe to its parent Window. We then use this regular Array Object and extending it's prototype.", "private": "", "guessedtype": "function"}, "_updateClassName": {"protected": "", "description": "Method for updating the className Property of the HTML Element", "guessedname": "_updateClassName", "guessedtype": "function"}, "ClassList": {"guessedname": "ClassList", "params": [{"type": "Element", "name": "el", "description": " The Element from which you want to get / set / toggle the classNames"}], "description": "Constructor Function for the classList Polyfill", "private": "", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Returns true if the Element already has the given Class"}, "params": [{"type": "String", "name": "token", "description": " Name of the class to be checked"}], "description": "Checks if the given class already exists on the Element", "guessedname": "contains", "guessedtype": "function"}, "toggle": {"return": {"type": "Boolean", "description": "Returns true if the class was added or false when the class was removed"}, "params": [{"type": "String", "name": "token", "description": " Name of the class which you want to toggle"}], "description": "Toggles a class on the given Element on and off", "guessedname": "toggle", "guessedtype": "function"}, "remove": {"params": [{"type": "String", "name": "token", "description": " Name of the class which should be removed"}], "description": "Removes a class from the className of the Element", "guessedname": "remove", "guessedtype": "function"}, "add": {"params": [{"type": "String", "name": "token", "description": " Name of the class which should be added"}], "description": "Adds a class to the className of the Element", "guessedname": "add", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "String of the classes contained in the classList separated by whitespaces"}, "description": "Creates a String of the classes contained in the classList separated by whitespaces to write them into the className property of an Element", "guessedname": "toString", "guessedtype": "function"}, "getConstructor": {"guessedname": "getConstructor", "return": {"type": "Function", "description": "Returns a Constructor Function which can then extended by adding Methods to its Prototype"}, "description": "Method that returns a Constructor Function for creating a classList Object", "private": "", "guessedtype": "function"}, "getRegularConstructor": {"guessedname": "getRegularConstructor", "return": {"type": "Function", "description": "Returns a Constructor Function which can then extended by adding Methods to its Prototype"}, "description": "Returns a Constructor Function whichs prototype is set to Array.prototype", "private": "", "guessedtype": "function"}}, "static": "", "file": "domlib.js", "guessedtype": "function", "shortname": "classList", "method": "classList", "description": "Element.classList Polyfill / Submodule"}, "dom.helper": {"name": "dom.helper", "namespace": "dom", "module": "dom", "guessedname": "helper", "methods": {"loadScript": {"return": {"type": "Boolean", "description": "Returns false if the Script is already loaded"}, "params": [{"type": "String", "name": "url", "description": " the Url of the Script that should be loaded"}, {"type": "String", "name": "id", "description": " A unique Name to prevent loading the same file twice (this ID will be used as a Dom ID)"}, {"type": "Function", "name": "callback", "description": " Optional: A Callback Function which should be executed when the Script is fully loaded (the callback gets also executed if the file is already loaded)"}], "description": "Method for loading Javascript Files asynchronously", "guessedname": "loadScript", "guessedtype": "function"}, "once": {"return": {"type": "Function", "description": "Returns a Function which can only be executed once (deletes the reference to the original function and fails silently)"}, "params": [{"type": "Function", "name": "fn", "description": " The Function you want to 'protect' for executing more than once"}], "description": "Method that takes a function and returns a function which can only be executed once", "guessedname": "once", "guessedtype": "function"}}, "file": "domlib.js", "guessedtype": "property", "shortname": "helper", "description": "Submodule for some helper functions"}, "dom.event": {"name": "dom.event", "namespace": "dom", "module": "dom", "guessedname": "event", "methods": {"preventDefault": {"params": [{"type": "Event", "name": "ev", "description": " The Eventobject"}, {"type": "Boolean", "name": "stopPropagation", "description": " Optional: Pass true, if you also want to stop the Event from bubbling up"}], "description": "Shorthand Function for event.preventDefault and event.stopPropagation.\nThis Method replaces itself on its first invocation with a Method specialized for the current Browser.", "guessedname": "preventDefault", "guessedtype": "function"}, "disconnect": {"params": [{"type": "Element", "name": "el", "description": " The Element on which the listener is currently bound"}, {"type": "String", "name": "event", "description": " The Eventtype the listener is registered for"}, {"type": "Function", "name": "listener", "description": " The Listener Callback which was registred for this event"}], "description": "Method for deregistering Callback Functions to Dom Events", "guessedname": "disconnect", "guessedtype": "function"}, "connect": {"params": [{"type": "Element", "name": "el", "description": " The Element on which the listener should be bound"}, {"type": "String", "name": "event", "description": " The Eventtype you want listen for"}, {"type": "Function", "name": "listener", "description": " The Listener Callback which will be exected when the Event occurs"}], "description": "Method for registering Callback Functions to Dom Events", "guessedname": "connect", "guessedtype": "function"}}, "file": "domlib.js", "guessedtype": "function", "shortname": "event", "description": "Submodule for Dom Event handling"}}, "version": "0.1.0", "namespaces": ["dom"]}